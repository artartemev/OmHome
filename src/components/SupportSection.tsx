import { motion } from 'motion/react';
import { useInView } from 'motion/react';
import { useRef } from 'react';
import { ExternalLink, Table } from 'lucide-react';
import { useLanguage } from '../contexts/LanguageContext';

const translations = {
  ru: {
    title: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç',
    donationsHelpTitle: '–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç:',
    donationsHelpText:
      '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º, –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∞—Å–∞–¥, —É–∫—Ä–∞—à–∞—Ç—å –∞–ª—Ç–∞—Ä—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.',
    paymentMethodsTitle: '–°–ø–æ—Å–æ–±—ã –ø—Ä–µ–≤–æ–¥–∞',
    paymentMethods: [
      { title: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', description: 'USDT/USDC/BTC –∏ –¥—Ä.' },
      { title: '–°–ë–ü', description: '–±—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤–Ω—É—Ç—Ä–∏ –†–§' },
      { title: 'SWIFT', description: '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥' }
    ],
    supportLevelsTitle: '–£—Ä–æ–≤–Ω–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    supportLevels: [
      { title: '–î—Ä—É–≥ OmHome', amount: '300 ‡∏ø / 500 ‚ÇΩ / $10' },
      { title: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π', amount: '900 ‡∏ø / 1 500 ‚ÇΩ / $30' },
      { title: '–°–æ‚Äë—Ç–≤–æ—Ä–µ—Ü', amount: '1 800 ‡∏ø / 3 000 ‚ÇΩ / $60' },
      { title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å', amount: '3 600 ‡∏ø / 6 000 ‚ÇΩ / $120' }
    ],
    transparencyTitle: '–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å',
    transparencyIntro: '–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç',
    transparencyDetails: '–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è/—Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Å—Ç–∞—Ç—å—è–º (–∞—Ä–µ–Ω–¥–∞, –ø—Ä–∞—Å–∞–¥, –∞–ª—Ç–∞—Ä—å, –±—ã—Ç, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ)',
    transparencyButton: '–ü—É–±–ª–∏—á–Ω–∞—è —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞',
    targetedTitle: '–¶–µ–ª–µ–≤—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è',
    donationCategories: [
      {
        emoji: 'üç≤',
        title: '–ù–∞ –ø—Ä–∞—Å–∞–¥',
        description: '–ø—Ä–æ–¥—É–∫—Ç—ã, —Å–ø–µ—Ü–∏–∏, –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è/–º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞, —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏.',
        quote: '¬´–í–∞—à–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ ‚Äî —ç—Ç–æ —á—å—è‚Äë—Ç–æ —Ç—ë–ø–ª–∞—è —Ç–∞—Ä–µ–ª–∫–∞ –ø—Ä–∞—Å–∞–¥–∞ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –ø–æ –¥—É—à–∞–º –ø–æ—Å–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª.',
        color: 'bg-[#86af8d]'
      },
      {
        emoji: 'üè°',
        title: '–ê—Ä–µ–Ω–¥–∞ –¥–æ–º–∞',
        description: '–µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –¥–æ–º –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ.',
        quote: '¬´–°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ–º ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã¬ª.',
        color: 'bg-[#afaf86]'
      },
      {
        emoji: 'ü™î',
        title: '–£–∫—Ä–∞—à–µ–Ω–∏–µ –∞–ª—Ç–∞—Ä—è',
        description: '—Ü–≤–µ—Ç—ã, —Ç–∫–∞–Ω—å, –ª–∞–º–ø–∞–¥—ã, –±–ª–∞–≥–æ–≤–æ–Ω–∏—è, –ø–∞—Ä–∞—Ñ–∏—Ä–Ω–∞–ª–∏–∏.',
        quote: '¬´–ü–æ–º–æ–≥–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–ª—Ç–∞—Ä–Ω—É—é –µ—â—ë –∫—Ä–∞—Å–∏–≤–µ–µ –∏ —á–∏—â–µ¬ª.',
        color: 'bg-[#86afad]'
      },
      {
        emoji: 'üß∫',
        title: '–ë—ã—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
        description: '—á–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, —Ä–µ–º–æ–Ω—Ç –º–µ–ª–æ—á–µ–π, —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –¥–ª—è –∫—É—Ö–Ω–∏ –∏ —É–±–æ—Ä–∫–∏.',
        quote: '¬´–ù–µ–∑–∞–º–µ—Ç–Ω—ã–µ, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –∏ —É—é—Ç¬ª.',
        color: 'bg-[#a386af]'
      }
    ]
  },
  en: {
    title: 'Support the project',
    donationsHelpTitle: 'Donations help us to:',
    donationsHelpText:
      'rent the house, host programs, cook prasadam, decorate the altar, and keep everything clean and equipped.',
    paymentMethodsTitle: 'Payment methods',
    paymentMethods: [
      { title: 'Cryptocurrency', description: 'USDT/USDC/BTC and more' },
      { title: 'FPS', description: 'instant transfers within Russia' },
      { title: 'SWIFT', description: 'international bank transfer' }
    ],
    supportLevelsTitle: 'Monthly support tiers',
    supportLevels: [
      { title: 'Friend of OmHome', amount: '300 ‡∏ø / 500 ‚ÇΩ / $10' },
      { title: 'Supporter', amount: '900 ‡∏ø / 1 500 ‚ÇΩ / $30' },
      { title: 'Co-creator', amount: '1 800 ‡∏ø / 3 000 ‚ÇΩ / $60' },
      { title: 'Guardian', amount: '3 600 ‡∏ø / 6 000 ‚ÇΩ / $120' }
    ],
    transparencyTitle: 'Transparency and reporting',
    transparencyIntro: 'Monthly report',
    transparencyDetails: 'income and expenses by category (rent, prasadam, altar, household, equipment)',
    transparencyButton: 'Public summary spreadsheet',
    targetedTitle: 'Targeted donations',
    donationCategories: [
      {
        emoji: 'üç≤',
        title: 'Prasadam',
        description: 'groceries, spices, reusable/disposable dishes, supplies.',
        quote: '‚ÄúYour donation becomes a warm plate of prasadam and a heartfelt talk after the program.‚Äù',
        color: 'bg-[#86af8d]'
      },
      {
        emoji: 'üè°',
        title: 'House rent',
        description: 'monthly rent and utilities.',
        quote: '‚ÄúA stable house means stable programs.‚Äù',
        color: 'bg-[#afaf86]'
      },
      {
        emoji: 'ü™î',
        title: 'Altar decoration',
        description: 'flowers, fabrics, lamps, incense, paraphernalia.',
        quote: '‚ÄúHelp make the altar even more beautiful and pure.‚Äù',
        color: 'bg-[#86afad]'
      },
      {
        emoji: 'üß∫',
        title: 'Household needs',
        description: 'cleaning supplies, small repairs, kitchen and cleaning consumables.',
        quote: '‚ÄúInvisible but essential expenses for order and coziness.‚Äù',
        color: 'bg-[#a386af]'
      }
    ]
  }
} as const;

export function SupportSection() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });
  const { language } = useLanguage();
  const {
    title,
    donationsHelpTitle,
    donationsHelpText,
    paymentMethodsTitle,
    paymentMethods,
    supportLevelsTitle,
    supportLevels,
    transparencyTitle,
    transparencyIntro,
    transparencyDetails,
    transparencyButton,
    targetedTitle,
    donationCategories
  } = translations[language];

  return (
    <section id="support" ref={ref} className="py-16 lg:py-24 bg-[#f8f6f3]">
      <div className="container mx-auto px-4">
        <motion.h2
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
          className="font-menorah text-4xl md:text-6xl lg:text-7xl text-black mb-16 text-center lg:text-left"
        >
          {title}
        </motion.h2>

        <div className="grid lg:grid-cols-2 gap-16 mb-16">
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.2 }}
          >
            <h3 className="text-2xl font-bold text-[#73729b] mb-6">{donationsHelpTitle}</h3>
            <p className="text-xl text-black leading-relaxed mb-8">{donationsHelpText}</p>

            <h3 className="text-2xl font-bold text-[#73729b] mb-6">{paymentMethodsTitle}</h3>
            <div className="space-y-4">
              {paymentMethods.map((method, index) => (
                <motion.div
                  key={method.title}
                  initial={{ opacity: 0, x: 20 }}
                  animate={isInView ? { opacity: 1, x: 0 } : {}}
                  transition={{ duration: 0.5, delay: 0.4 + index * 0.1 }}
                  className="hover:bg-white p-4 rounded-lg transition-colors cursor-pointer"
                >
                  <h4 className="text-xl font-bold text-[#241f74] underline mb-1">{method.title}</h4>
                  <p className="text-lg text-black">{method.description}</p>
                </motion.div>
              ))}
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, x: 50 }}
            animate={isInView ? { opacity: 1, x: 0 } : {}}
            transition={{ duration: 0.8, delay: 0.4 }}
          >
            <h3 className="text-2xl font-bold text-[#73729b] mb-6">{supportLevelsTitle}</h3>
            <div className="grid grid-cols-2 gap-4 mb-8">
              {supportLevels.map((level, index) => (
                <motion.div
                  key={level.title}
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={isInView ? { opacity: 1, scale: 1 } : {}}
                  transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}
                  whileHover={{ scale: 1.05 }}
                  className="bg-white p-4 rounded-lg shadow-md cursor-pointer"
                >
                  <h4 className="text-lg font-bold text-[#241f74] underline mb-2">{level.title}</h4>
                  <p className="text-sm text-black">{level.amount}</p>
                </motion.div>
              ))}
            </div>

            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={isInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.6, delay: 1 }}
              className="bg-white p-6 rounded-xl shadow-lg"
            >
              <h4 className="text-xl font-bold text-[#73729b] mb-4">{transparencyTitle}</h4>
              <p className="text-lg text-black leading-relaxed mb-4">
                <span className="font-bold">{transparencyIntro}:</span> {transparencyDetails}
              </p>
              <button className="flex items-center gap-2 text-[#4b4a73] underline hover:text-[#73729b] transition-colors">
                <Table size={20} />
                {transparencyButton}
                <ExternalLink size={16} />
              </button>
            </motion.div>
          </motion.div>
        </div>

        {/* Donation Categories */}
        <motion.h3
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.6, delay: 0.8 }}
          className="text-2xl font-bold text-[#73729b] mb-8 text-center"
        >
          {targetedTitle}
        </motion.h3>

        <div className="grid md:grid-cols-2 xl:grid-cols-4 gap-6 mb-12">
          {donationCategories.map((category, index) => (
            <motion.div
              key={category.title}
              initial={{ opacity: 0, y: 50 }}
              animate={isInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.6, delay: 1 + index * 0.1 }}
              whileHover={{ y: -5, scale: 1.02 }}
              className={`${category.color} text-white p-6 rounded-xl shadow-lg cursor-pointer`}
            >
              <div className="text-5xl mb-4 text-center">{category.emoji}</div>
              <h4 className="text-xl font-bold text-center mb-4">{category.title}</h4>
              <p className="text-base leading-relaxed mb-4">{category.description}</p>
              <p className="text-base font-semibold leading-relaxed">{category.quote}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
}
